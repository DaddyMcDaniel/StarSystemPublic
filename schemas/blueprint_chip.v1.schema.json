/*
SUMMARY: Blueprint Chip Schema v1
==================================
Defines deterministic node graphs generated from natural language prompts for StarSystem building.
Enables AI-assisted construction by converting ideas into executable building blueprints.

KEY COMPONENTS:
- prompt_input: Original natural language description
- node_graph: Deterministic graph structure with nodes, edges, parameters
- metadata: Provenance, seed, generation context
- validation: Structural integrity and constraint checking

USAGE:
- Generated by tools.generators.blueprints.emit_chip from prompts
- Imported by tools.generators.blueprints.import_chip for construction
- Enables sharing player-created building patterns
- Supports Terraria/Eco-style hammer configuration workflows

RELATED FILES:
- tools: blueprints.emit_chip, blueprints.import_chip
- artifacts: runs/{run_id}/chips/
- Enables AI-assisted building in mini-planets
*/

{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "urn:starsystem:schema:blueprint_chip:v1",
  "version": 1,
  "title": "Blueprint Chip Schema",
  "description": "Deterministic node graph representation of building blueprints from natural language prompts",
  "type": "object",
  "additionalProperties": false,
  "properties": {
    "metadata": {
      "type": "object",
      "description": "Generation context and provenance",
      "additionalProperties": false,
      "properties": {
        "chip_id": {"type": "string"},
        "created_at": {"type": "string", "format": "date-time"},
        "seed_used": {"type": "integer", "minimum": 0},
        "prompt_hash": {"type": "string"},
        "generator_version": {"type": "string"},
        "author": {"type": "string"},
        "tags": {"type": "array", "items": {"type": "string"}}
      },
      "required": ["chip_id", "created_at", "seed_used"]
    },
    "prompt_input": {
      "type": "object",
      "description": "Original natural language input",
      "additionalProperties": false,
      "properties": {
        "text": {"type": "string"},
        "context": {"type": "string"},
        "constraints": {
          "type": "object",
          "properties": {
            "max_size": {"type": "object", "properties": {"x": {"type": "number"}, "y": {"type": "number"}, "z": {"type": "number"}}},
            "material_limits": {"type": "object"},
            "style_preferences": {"type": "array", "items": {"type": "string"}}
          }
        }
      },
      "required": ["text"]
    },
    "node_graph": {
      "type": "object",
      "description": "Deterministic graph structure representing the blueprint",
      "additionalProperties": false,
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {"type": "string"},
              "type": {"type": "string", "enum": ["block", "structure", "decoration", "system", "connector"]},
              "position": {"type": "object", "properties": {"x": {"type": "number"}, "y": {"type": "number"}, "z": {"type": "number"}}},
              "parameters": {"type": "object"},
              "material": {"type": "string"},
              "rotation": {"type": "object", "properties": {"x": {"type": "number"}, "y": {"type": "number"}, "z": {"type": "number"}}}
            },
            "required": ["id", "type", "position"]
          }
        },
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "from_node": {"type": "string"},
              "to_node": {"type": "string"},
              "relationship": {"type": "string", "enum": ["supports", "connects", "depends_on", "decorates"]},
              "parameters": {"type": "object"}
            },
            "required": ["from_node", "to_node", "relationship"]
          }
        }
      },
      "required": ["nodes"]
    },
    "validation": {
      "type": "object",
      "description": "Structural integrity and constraint validation",
      "additionalProperties": false,
      "properties": {
        "is_valid": {"type": "boolean"},
        "warnings": {"type": "array", "items": {"type": "string"}},
        "constraints_met": {"type": "boolean"},
        "estimated_resources": {
          "type": "object",
          "properties": {
            "tri_count": {"type": "integer"},
            "material_count": {"type": "object"}
          }
        }
      },
      "required": ["is_valid"]
    }
  },
  "required": ["metadata", "prompt_input", "node_graph", "validation"]
}